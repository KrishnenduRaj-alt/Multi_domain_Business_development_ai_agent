from fpdf import FPDF
from datetime import datetime
import pandas as pd # Needed for formatting data if passed as DataFrames

class PDF(FPDF):
    def header(self):
        # Logo (optional, you can add a path to an image if you have one)
        # self.image('logo.png', 10, 8, 33)
        # Font
        self.set_font('Arial', 'B', 15)
        # Title
        self.cell(0, 10, 'Apex Insights AI - Business Report', 0, 1, 'C')
        # Line break
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}/{{nb}}', 0, 0, 'C')
        self.cell(0, 10, f'Generated: {datetime.now().strftime("%Y-%m-%d %H:%M")}', 0, 0, 'R')

    def chapter_title(self, title):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(5)

    def chapter_body(self, body):
        self.set_font('Arial', '', 10)
        self.multi_cell(0, 5, body)
        self.ln()

    def add_kpis(self, kpis):
        self.set_font('Arial', 'B', 10)
        self.cell(0, 7, 'Key Performance Indicators:', 0, 1, 'L')
        self.set_font('Arial', '', 10)
        for label, value in kpis.items():
            self.cell(0, 7, f'- {label}: {value}', 0, 1, 'L')
        self.ln(5)

    def add_dataframe_as_table(self, df, title="Data Table"):
        if df.empty:
            self.chapter_body(f"No data available for: {title}")
            return

        self.set_font('Arial', 'B', 10)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(2)

        # Table header
        self.set_font('Arial', 'B', 8)
        col_widths = [self.get_string_width(col) + 6 for col in df.columns]
        # Adjust column widths to fit page and content
        total_width = sum(col_widths)
        page_width = self.w - 2 * self.l_margin

        # Scale down if too wide, or distribute evenly if content is small
        if total_width > page_width:
            col_widths = [w * (page_width / total_width) for w in col_widths]
        else:
            # Distribute remaining space if table is narrow
            remaining_width = page_width - total_width
            if len(col_widths) > 0:
                extra_per_col = remaining_width / len(col_widths)
                col_widths = [w + extra_per_col for w in col_widths]


        for col, width in zip(df.columns, col_widths):
            self.cell(width, 7, str(col), 1, 0, 'C')
        self.ln()

        # Table rows
        self.set_font('Arial', '', 8)
        for index, row in df.iterrows():
            for col, width in zip(df.columns, col_widths):
                cell_value = str(row[col])
                # Handle float formatting for sales/price columns
                if 'Sales' in col or 'Price' in col or 'Margin' in col:
                    try:
                        cell_value = f"£{float(cell_value):,.2f}"
                    except ValueError:
                        pass # Keep as is if not a number
                elif 'Date' in col or 'Expiry' in col:
                     try:
                        cell_value = pd.to_datetime(cell_value).strftime('%Y-%m-%d')
                     except ValueError:
                        pass

                self.cell(width, 6, cell_value, 1, 0, 'L')
            self.ln()
        self.ln(5)


def generate_report(kpis, top_products_df, top_categories_df, forecast_summary_df, output_filename="business_report.pdf"):
    pdf = PDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15) # Set auto page break margin

    # Introduction
    pdf.chapter_body("This report provides a summary of key business insights, sales trends, and future forecasts for your medical store. It is generated by the Apex Insights AI agent to assist with data-driven decision making.")

    # KPIs
    pdf.add_kpis(kpis)

    # Top Products
    pdf.add_dataframe_as_table(top_products_df, "Top Selling Products")

    # Top Categories
    pdf.add_dataframe_as_table(top_categories_df, "Top Selling Categories")

  # Forecast Summary
    pdf.chapter_title("Sales Forecast Summary")
    if not forecast_summary_df.empty:
        pdf.chapter_body(f"Based on historical data, daily sales are predicted to be around £{forecast_summary_df['yhat'].mean():,.2f} over the next 30 days, with a range from £{forecast_summary_df['yhat_lower'].min():,.2f} to £{forecast_summary_df['yhat_upper'].max():,.2f}.")
        # Optionally add forecast table
        # Removed the 'with pdf.rotation(90):' line
        pdf.add_dataframe_as_table(forecast_summary_df[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10), "Recent Forecast Details") # Show last 10 forecast days
    else:
        pdf.chapter_body("No sales forecast available.")

    try:
        pdf.output(output_filename)
        print(f"Report generated successfully: {output_filename}")
        return True
    except Exception as e:
        print(f"Error generating report: {e}")
        return False

if __name__ == "__main__":
    # Example usage (for testing this script directly)
    # You would pass actual dataframes from your app.py in reality
    example_kpis = {
        "Total Revenue": "£1,234,567.89",
        "Total Items Sold": "500,000",
        "Average Sale Value": "£25.00"
    }
    example_top_products = pd.DataFrame({
        'Product': ['Paracetamol 500mg', 'Multivitamin Tablets', 'Bandages (Assorted)'],
        'Total Sales': [50000.00, 30000.00, 20000.00]
    })
    example_top_categories = pd.DataFrame({
        'Category': ['Pain Relief', 'Supplements', 'First Aid'],
        'Total Sales': [100000.00, 70000.00, 40000.00]
    })
    example_forecast = pd.DataFrame({
        'ds': pd.to_datetime(['2025-07-18', '2025-07-19', '2025-07-20']),
        'yhat': [1500.0, 1550.0, 1600.0],
        'yhat_lower': [1400.0, 1450.0, 1500.0],
        'yhat_upper': [1600.0, 1650.0, 1700.0]
    })

    print("Testing report generation with example data...")
    generate_report(example_kpis, example_top_products, example_top_categories, example_forecast, "example_report.pdf")